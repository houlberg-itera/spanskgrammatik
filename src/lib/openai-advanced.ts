import OpenAI from 'openai';
import { ExerciseContent, QuestionType, SpanishLevel } from '@/types/database';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Retry function with exponential backoff for API rate limiting
// Optimized for GPT-5 with high rate limits (500 RPM, 500K TPM)
async function retryWithBackoff<T>(
  fn: () => Promise<T>,
  maxRetries: number = 8,  // Increased from 5 to 8 retries for rate limits
  baseDelay: number = 2000  // Increased from 500ms to 2000ms for rate limit recovery
): Promise<T> {
  console.log(`üîÑ Starting retry function with maxRetries: ${maxRetries}, baseDelay: ${baseDelay}ms`);
  
  for (let attempt = 0; attempt <= maxRetries; attempt++) {
    try {
      console.log(`üéØ Attempt ${attempt + 1}/${maxRetries + 1}`);
      const result = await fn();
      console.log(`‚úÖ Attempt ${attempt + 1} successful`);
      return result;
    } catch (error: any) {
      console.error(`‚ùå Attempt ${attempt + 1} failed:`, {
        message: error.message,
        status: error.status,
        code: error.code,
        type: error.type
      });
      
      // Check if this is a rate limit error or "Too Many Requests"
      const isRateLimit = error?.status === 429 || 
                         error?.code === 'rate_limit_exceeded' ||
                         error?.message?.includes('Too Many Requests') ||
                         error?.message?.includes('rate_limit_exceeded') ||
                         error?.message?.includes('Rate limit');
      
      console.log(`üîç Is rate limit error: ${isRateLimit}`);
      
      // If this is the last attempt or not a rate limit error, throw
      if (attempt === maxRetries || !isRateLimit) {
        console.error(`‚ùå Final failure - throwing error. Last attempt: ${attempt === maxRetries}, Rate limit: ${isRateLimit}`);
        throw error;
      }
      
      // Calculate delay with exponential backoff and jitter for rate limits
      const delay = baseDelay * Math.pow(2, attempt) + Math.random() * 2000;  // More jitter for rate limits
      console.log(`‚è≥ Rate limit hit, retrying in ${Math.round(delay)}ms (attempt ${attempt + 1}/${maxRetries + 1})`);
      
      // Wait before retrying
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
  
  throw new Error('Max retries exceeded');
}

export interface AdvancedGenerateExerciseParams {
  level: SpanishLevel;
  topic: string;
  topicDescription: string;
  exerciseType: 'multiple_choice' | 'fill_blank' | 'translation' | 'conjugation' | 'sentence_structure';
  questionCount?: number;
  difficulty: 'easy' | 'medium' | 'hard';
  existingQuestions?: string[];
  generateVariations?: boolean;
  includeExplanations?: boolean;
  targetProficiency?: boolean;
  model?: string; // OpenAI model to use (e.g., 'gpt-4o', 'gpt-5')
}

interface ProficiencyIndicator {
  skill: string;
  description: string;
  difficulty_level: string;
}

interface EnhancedExerciseContent extends ExerciseContent {
  metadata?: {
    topic_coverage: string[];
    proficiency_indicators: ProficiencyIndicator[];
    cognitive_load: 'low' | 'medium' | 'high';
    assessment_validity: number; // 0-1 score
  };
}

const DIFFICULTY_GUIDELINES = {
  A1: {
    easy: 'Grundl√¶ggende ordforr√•d og simple strukturer. Enkle s√¶tninger med "ser" og "estar".',
    medium: 'Almindelige hverdagsudtryk og grundl√¶ggende grammatiske m√∏nstre.',
    hard: 'Introduktion til mere komplekse strukturer, men stadig inden for A1-niveau.'
  },
  A2: {
    easy: 'Almindelige situationer og kendte emner. Simple fortid og fremtid.',
    medium: 'Komplekse situationer, uregelm√¶ssige verbum, komparativer.',
    hard: 'Avancerede A2-strukturer der forbereder til B1-niveau.'
  },
  B1: {
    easy: 'Almindelige komplekse strukturer, subjunktiv i enkle tilf√¶lde.',
    medium: 'Avanceret grammatik, forskellige subjunktiv-anvendelser.',
    hard: 'Komplekse strukturer der kr√¶ver dyb forst√•else af spansk grammatik.'
  }
};

const EXERCISE_TYPE_PROMPTS = {
  multiple_choice: {
    structure: 'Flervalgssp√∏rgsm√•l med 4 svarmuligheder hvor kun √©n er korrekt.',
    assessment: 'Test forst√•else af grammatiske regler og ordforr√•d gennem kontekst.',
    tips: 'G√∏r distraktorerne plausible men klart forkerte. Undg√• √•benlyse forkerte svar.'
  },
  fill_blank: {
    structure: 'S√¶tninger med tomme pladser der skal udfyldes med det korrekte ord eller b√∏jning.',
    assessment: 'Test aktiv anvendelse af grammatik og ordforr√•d.',
    tips: 'Giv kun √©t klart korrekt svar. Undg√• tvetydige kontekster. Brug _ til at markere tomme pladser. Inkluder tilstr√¶kkelig kontekst.'
  },
  translation: {
    structure: 'Overs√¶ttelse fra dansk til spansk eller omvendt.',
    assessment: 'Test forst√•else af b√•de sprog og kulturelle nuancer.',
    tips: 'Brug naturlige s√¶tninger som kunne forekomme i virkelige situationer.'
  },
  conjugation: {
    structure: 'Verbum der skal b√∏jes i den korrekte form baseret p√• kontekst.',
    assessment: 'Test beherskelse af verbb√∏jninger og tid/modus valg.',
    tips: 'Inkluder kontekst der klart indikerer den √∏nskede tid og modus.'
  },
  sentence_structure: {
    structure: 'Omstrukturering af s√¶tninger eller ordorganisering.',
    assessment: 'Test forst√•else af spansk syntaks og s√¶tningsopbygning.',
    tips: 'Fokuser p√• almindelige fejl som danske studerende laver.'
  }
};

const PROFICIENCY_INDICATORS = {
  A1: [
    'Kan forst√• og bruge grundl√¶ggende udtryk',
    'Kan pr√¶sentere sig selv og andre',
    'Kan stille og besvare sp√∏rgsm√•l om personlige forhold',
    'Kan skelne mellem "ser" og "estar"',
    'Kan bruge grundl√¶ggende substantiver og adjektiver'
  ],
  A2: [
    'Kan kommunikere om rutineopgaver',
    'Kan beskrive sin baggrund og umgivelser',
    'Kan bruge datid og fremtid',
    'Kan h√•ndtere uregelm√¶ssige verbum',
    'Kan bruge komparativer og superlativer'
  ],
  B1: [
    'Kan h√•ndtere de fleste situationer p√• rejser',
    'Kan udtrykke holdninger og begrunde synspunkter',
    'Kan bruge subjunktiv i almindelige tilf√¶lde',
    'Kan forst√• og bruge betinget modus',
    'Kan konstruere komplekse s√¶tninger'
  ]
};

export async function generateAdvancedExercise({
  level,
  topic,
  topicDescription,
  exerciseType,
  questionCount = 8,
  difficulty,
  existingQuestions = [],
  generateVariations = true,
  includeExplanations = true,
  targetProficiency = true,
  model = 'gpt-4o', // Default to GPT-4o if not specified
}: AdvancedGenerateExerciseParams): Promise<EnhancedExerciseContent> {
  console.log('ü§ñ OpenAI Advanced: Starting exercise generation...');
  console.log('üìã Parameters:', {
    level,
    topic,
    topicDescription,
    exerciseType,
    questionCount,
    difficulty,
    existingQuestionsCount: existingQuestions.length,
    generateVariations,
    includeExplanations,
    targetProficiency,
    model
  });

  // GPT-5 reasoning token retry logic - reduce question count on reasoning token issues
  const maxQuestionReductions = 3;
  let currentQuestionCount = questionCount;
  
  for (let reduction = 0; reduction <= maxQuestionReductions; reduction++) {
    try {
      console.log(`üéØ Attempting generation with ${currentQuestionCount} questions (reduction attempt ${reduction})`);
      
      return await generateAdvancedExerciseInternal({
        level,
        topic,
        topicDescription,
        exerciseType,
        questionCount: currentQuestionCount,
        difficulty,
        existingQuestions,
        generateVariations,
        includeExplanations,
        targetProficiency,
        model
      });
      
    } catch (error: any) {
      const isReasoningTokenIssue = error.isReasoningTokenIssue || error.message?.includes('GPT-5 used reasoning tokens but returned no content');
      
      if (isReasoningTokenIssue && reduction < maxQuestionReductions) {
        // Reduce question count by half and try again
        currentQuestionCount = Math.max(1, Math.floor(currentQuestionCount / 2));
        console.log(`‚ö†Ô∏è GPT-5 reasoning token issue detected. Reducing question count to ${currentQuestionCount} and retrying...`);
        continue;
      }
      
      // If not a reasoning token issue or we've exhausted retries, throw the error
      throw error;
    }
  }
  
  throw new Error('Failed to generate exercises even with reduced question count');
}

async function generateAdvancedExerciseInternal({
  level,
  topic,
  topicDescription,
  exerciseType,
  questionCount = 8,
  difficulty,
  existingQuestions = [],
  generateVariations = true,
  includeExplanations = true,
  targetProficiency = true,
  model = 'gpt-4o',
}: AdvancedGenerateExerciseParams): Promise<EnhancedExerciseContent> {

  // Check OpenAI API key
  if (!process.env.OPENAI_API_KEY) {
    console.error('‚ùå OPENAI_API_KEY environment variable is not set');
    throw new Error('OpenAI API key is not configured');
  }
  console.log('‚úÖ OpenAI API key is configured');

  // Validate required parameters
  if (!level || !difficulty || !topic || !exerciseType) {
    console.error('‚ùå Missing required parameters:', { level, difficulty, topic, exerciseType });
    throw new Error(`Missing required parameters: level=${level}, difficulty=${difficulty}, topic=${topic}, exerciseType=${exerciseType}`);
  }

  // Special handling for problematic combinations
  if (topic.toLowerCase().includes('komplekse s√¶tningsstrukturer') && exerciseType === 'fill_blank') {
    console.log('‚ö†Ô∏è Detected problematic combination: Complex sentence structures + fill_blank');
    console.log('üîÑ Converting to multiple_choice for better results');
    
    // Change the exercise type to multiple_choice for complex sentence structures
    exerciseType = 'multiple_choice';
    
    // Update the user prompt to reflect this change
    console.log('‚úÖ Converted fill_blank to multiple_choice for complex sentence structures');
  }

  // Validate level and difficulty exist in our guidelines
  if (!DIFFICULTY_GUIDELINES[level]) {
    console.error(`‚ùå Invalid level: ${level}`);
    throw new Error(`Invalid level: ${level}. Must be one of: ${Object.keys(DIFFICULTY_GUIDELINES).join(', ')}`);
  }

  if (!DIFFICULTY_GUIDELINES[level][difficulty]) {
    console.error(`‚ùå Invalid difficulty "${difficulty}" for level "${level}"`);
    throw new Error(`Invalid difficulty "${difficulty}" for level "${level}". Must be one of: ${Object.keys(DIFFICULTY_GUIDELINES[level]).join(', ')}`);
  }

  if (!EXERCISE_TYPE_PROMPTS[exerciseType]) {
    console.error(`‚ùå Invalid exercise type: ${exerciseType}`);
    throw new Error(`Invalid exercise type: ${exerciseType}. Must be one of: ${Object.keys(EXERCISE_TYPE_PROMPTS).join(', ')}`);
  }

  console.log('‚úÖ All parameters validated successfully');

  const difficultyGuide = DIFFICULTY_GUIDELINES[level][difficulty];
  const exerciseTypeInfo = EXERCISE_TYPE_PROMPTS[exerciseType];
  const proficiencyTargets = PROFICIENCY_INDICATORS[level];

  // Special enhanced prompts for complex sentence structures
  let additionalPromptForComplexStructures = '';
  if (topic.toLowerCase().includes('komplekse s√¶tningsstrukturer') || topic.toLowerCase().includes('complex')) {
    additionalPromptForComplexStructures = `
S√ÜRLIGE RETNINGSLINJER FOR KOMPLEKSE S√ÜTNINGSSTRUKTURER:
- Fokuser p√• relative s√¶tninger (que, quien, donde, cuando)
- Inkluder konjunktioner (aunque, para que, sin que, despu√©s de que)
- Test forst√•else af s√¶tningsopbygning og ordstilling
- Brug eksempler med subordinerede s√¶tninger
- Fokuser p√• forskelle mellem dansk og spansk s√¶tningsstruktur
- Inkluder b√•de sammensatte og komplekse s√¶tninger
- Test korrekt brug af konjunktiv i underordnede s√¶tninger

EKSEMPLER P√Ö GODE KOMPLEKSE S√ÜTNINGSSTRUKTUR √òVELSER:
1. Relative s√¶tninger: "La casa que compramos es muy grande"
2. Betingede s√¶tninger: "Si tuviera dinero, viajar√≠a"
3. Tidss√¶tninger: "Cuando llegue a casa, cocinar√©"
4. √Örsagss√¶tninger: "Como estaba cansado, me fui a dormir"
5. Form√•lss√¶tninger: "Estudio para que mis padres est√©n orgullosos"

UNDG√Ö disse almindelige problemer:
- Alt for komplekse s√¶tninger for niveauet
- Tvetydige strukturer hvor flere ordstillinger kunne v√¶re korrekte
- Kulturspecifikke udtryk som danske elever ikke kender
`;
  }

  const systemPrompt = `Du er en ekspert i spansk grammatik og sprogp√¶dagogik med speciale i at skabe valide proficienstests for danske studerende.

OPGAVE: Generer ${questionCount} ${exerciseType} √∏velser p√• ${level}-niveau om "${topic}" med ${difficulty} sv√¶rhedsgrad.

NIVEAU RETNINGSLINJER (${level}):
${difficultyGuide}

√òVELSESTYPE (${exerciseType}):
- Struktur: ${exerciseTypeInfo.structure}
- Vurdering: ${exerciseTypeInfo.assessment}
- Tips: ${exerciseTypeInfo.tips}

PROFICIENSKRAV (${level}):
${proficiencyTargets.map(indicator => `- ${indicator}`).join('\n')}

KVALITETSKRAV:
1. Alle instruktioner og forklaringer p√• dansk
2. KRITISK: Brug RENE SPANSKE S√ÜTNINGER i √∏velser - ingen blanding af dansk og spansk
3. ALDRIG bland sprog i samme s√¶tning (fx "Jeg har k√∏bt _ casa i Spanien" ‚ùå)
4. Korrekt format: Dansk instruktion + Rent spansk √∏velsesindhold (fx "He comprado _ casa en Espa√±a" ‚úÖ)
5. Progressiv sv√¶rhedsgrad inden for ${difficulty}-kategorien
6. Varierede kontekster og situationer
7. Kulturelt relevante eksempler
8. Undg√• gentagelse af eksisterende sp√∏rgsm√•l
9. Inkluder distraktoranalyse for multiple choice
10. Pedagogisk progression mellem sp√∏rgsm√•l
11. For fill_blank: Brug _ til tomme pladser og s√∏rg for √©t entydigt svar
12. KRAV: Generer MINDST ${questionCount} komplette, valide sp√∏rgsm√•l

SPROGADSKILLELSE EKSEMPLER:
‚ùå FORKERT: "Hvilken artikel passer til substantivet 'casa' i s√¶tningen: Jeg har k√∏bt _ casa i Spanien?"
‚úÖ KORREKT: Instruktion: "V√¶lg den korrekte artikel til f√∏lgende spanske s√¶tning:" + √òvelse: "He comprado _ casa en Espa√±a"

EKSEMPLER P√Ö KORREKTE FILL_BLANK √òVELSER:
‚úÖ KORREKT format for fill_blank:
{
  "id": "fb1",
  "type": "fill_blank",
  "question_da": "Udfyld den tomme plads med den korrekte verbform: Mar√≠a _ (hablar) espa√±ol muy bien.",
  "correct_answer": "habla",
  "explanation_da": "Vi bruger 'habla' fordi det er 3. person ental af verbet 'hablar' i pr√¶sens.",
  "difficulty_level": "easy"
}

‚úÖ KORREKT format for fill_blank (artikel):
{
  "id": "fb2", 
  "type": "fill_blank",
  "question_da": "Udfyld med den korrekte artikel: Tengo _ perro muy inteligente.",
  "correct_answer": "un",
  "explanation_da": "Vi bruger 'un' fordi 'perro' er maskulint og bestemt artikel i entalsform.",
  "difficulty_level": "medium"
}

UNDG√Ö DISSE EKSISTERENDE SP√òRGSM√ÖL:
${existingQuestions.slice(0, 10).map(q => `- "${q}"`).join('\n')}

${additionalPromptForComplexStructures}

EKSEMPEL P√Ö GOD PROGRESSION:
- Sp√∏rgsm√•l 1-3: Introducer konceptet
- Sp√∏rgsm√•l 4-6: √òg kompleksiteten
- Sp√∏rgsm√•l 7-8: Test dyb forst√•else og anvendelse`;

  const userPrompt = `Generer N√òJAGTIGT ${questionCount} ${exerciseType} √∏velser om "${topic}" (${topicDescription}).

Niveau: ${level}
Sv√¶rhedsgrad: ${difficulty}
Focus: Proficienstest der kan vurdere elevens beherskelse af emnet

KRITISKE KRAV:
- Du SKAL generere pr√¶cis ${questionCount} komplette, funktionelle sp√∏rgsm√•l
- Hvert sp√∏rgsm√•l SKAL have alle p√•kr√¶vede felter udfyldt
- For fill_blank: Brug N√òJAGTIGT √âN _ i question_da og giv √âT entydigt svar i correct_answer
- For multiple_choice: Inkluder 4 realistiske svarmuligheder
- Alle forklaringer skal v√¶re detaljerede og p√¶dagogiske p√• dansk
${exerciseType === 'fill_blank' ? `
S√ÜRLIGE KRAV FOR FILL_BLANK:
- question_da SKAL indeholde n√∏jagtigt √©n _ (underscore) som markerer den tomme plads
- correct_answer SKAL v√¶re et enkelt ord eller kort udtryk (maks 3 ord)
- Konteksten skal g√∏re svaret entydigt
- Undg√• tvetydige s√¶tninger hvor flere svar kunne v√¶re korrekte
` : ''}

Returner KUN valid JSON i dette format:
{
  "instructions_da": "Detaljerede instruktioner p√• dansk",
  "questions": [
    {
      "id": "q1",
      "type": "${exerciseType}",
      "question_da": "Sp√∏rgsm√•l p√• dansk${exerciseType === 'fill_blank' ? ' med _ for tomme pladser' : ''}",
      ${exerciseType === 'multiple_choice' ? `"options": ["option1", "option2", "option3", "option4"],` : ''}
      "correct_answer": "${exerciseType === 'fill_blank' ? 'enkelt ord eller kort udtryk' : 'korrekt svar'}",
      "explanation_da": "Detaljeret forklaring p√• dansk med spansk eksempel",
      "difficulty_level": "${difficulty}",
      "proficiency_indicator": "hvilket niveau-m√•l dette sp√∏rgsm√•l tester"
    }
  ],
  "metadata": {
    "topic_coverage": ["emne1", "emne2", "emne3"],
    "proficiency_indicators": [
      {
        "skill": "f√¶rdighed",
        "description": "beskrivelse af hvad der testes",
        "difficulty_level": "${difficulty}"
      }
    ],
    "cognitive_load": "low|medium|high",
    "assessment_validity": 0.85
  }
}

HUSK: Du skal generere ${questionCount} sp√∏rgsm√•l - ingen mere, ingen mindre. Fokuser p√• variation og autenticitet.`;

  console.log('üîÑ Preparing OpenAI API call...');
  console.log('üìù System prompt length:', systemPrompt.length);
  console.log('üìù User prompt length:', userPrompt.length);

  try {
    console.log(`üåê Making OpenAI API call with model: ${model}`);
    const completion = await retryWithBackoff(async () => {
      console.log('üîÑ Attempting OpenAI API call...');
      return await openai.chat.completions.create({
        model: model,
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: userPrompt }
        ],
        temperature: model === 'gpt-5' ? 1 : 0.7,  // GPT-5 only supports temperature: 1, others can use 0.7
        max_completion_tokens: model === 'gpt-5' ? 4000 : 3000,  // Higher token limit for GPT-5
      });
    });

    console.log('‚úÖ OpenAI API call successful');
    console.log('üìä Usage:', completion.usage);

    const responseContent = completion.choices[0]?.message?.content;
    
    // Handle case where GPT-5 uses reasoning tokens but returns empty content
    if (!responseContent || responseContent.trim().length === 0) {
      console.error('‚ùå No response content from OpenAI');
      console.error('üìä Completion details:', {
        choice: completion.choices[0],
        finish_reason: completion.choices[0]?.finish_reason,
        usage: completion.usage
      });
      
      // If this used reasoning tokens but no content, it might be a GPT-5 issue
      if (completion.usage?.completion_tokens_details?.reasoning_tokens > 0) {
        console.error('‚ö†Ô∏è GPT-5 used reasoning tokens but returned no content - this may be a model issue');
        const error = new Error('GPT-5 used reasoning tokens but returned no content. Try reducing prompt complexity or question count.');
        (error as any).isReasoningTokenIssue = true;  // Add flag for wrapper to detect
        throw error;
      }
      
      throw new Error('No response from OpenAI');
    }

    console.log('üìù Raw response length:', responseContent.length);
    console.log('üìù Raw response preview:', responseContent.substring(0, 200) + '...');

    // Clean up response and parse JSON
    const cleanedResponse = responseContent
      .replace(/```json\n?/g, '')
      .replace(/```\n?/g, '')
      .trim();

    console.log('üßπ Cleaned response length:', cleanedResponse.length);
    console.log('üßπ Cleaned response preview:', cleanedResponse.substring(0, 200) + '...');

    let exerciseContent: EnhancedExerciseContent;
    try {
      console.log('üîÑ Parsing JSON response...');
      exerciseContent = JSON.parse(cleanedResponse);
    } catch (parseError) {
      console.error('‚ùå JSON parse error:', parseError);
      console.error('‚ùå Raw response that failed to parse:', responseContent);
      console.error('‚ùå Cleaned response that failed to parse:', cleanedResponse);
      throw new Error(`Invalid JSON response from AI: ${parseError.message}`);
    }

    console.log('‚úÖ JSON parsing successful');
    console.log('üìä Generated questions count:', exerciseContent.questions?.length || 0);

    // Validate and enhance the response
    if (!exerciseContent.questions || exerciseContent.questions.length === 0) {
      console.error('‚ùå No questions generated in response:', exerciseContent);
      throw new Error(`No questions generated. Expected ${questionCount} questions.`);
    }

    if (exerciseContent.questions.length < questionCount) {
      console.warn(`‚ö†Ô∏è Generated ${exerciseContent.questions.length} questions, expected ${questionCount}`);
    } else {
      console.log(`‚úÖ Generated ${exerciseContent.questions.length} questions as requested`);
    }

    // Add IDs and ensure required fields
    exerciseContent.questions = exerciseContent.questions.map((q, index) => ({
      ...q,
      id: q.id || `q${index + 1}`,
      difficulty_level: q.difficulty_level || difficulty,
      proficiency_indicator: q.proficiency_indicator || `${level} level skill assessment`
    }));

    // Ensure metadata exists
    if (!exerciseContent.metadata) {
      exerciseContent.metadata = {
        topic_coverage: [topic],
        proficiency_indicators: [{
          skill: topic,
          description: `Assessment of ${topic} knowledge at ${level} level`,
          difficulty_level: difficulty
        }],
        cognitive_load: difficulty === 'easy' ? 'low' : difficulty === 'medium' ? 'medium' : 'high',
        assessment_validity: 0.85
      };
    }

    console.log('‚úÖ Advanced exercise generation completed successfully');
    return exerciseContent;

  } catch (error) {
    console.error('‚ùå Error generating advanced exercise:', error);
    console.error('‚ùå Error details:', {
      message: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
      name: error instanceof Error ? error.name : undefined,
      status: (error as any)?.status,
      topic,
      exerciseType,
      level,
      difficulty
    });

    // Special handling for complex sentence structures
    if (topic.toLowerCase().includes('komplekse s√¶tningsstrukturer') || topic.toLowerCase().includes('complex')) {
      console.log('‚ùå Complex sentence structure generation failed');
      
      // Provide a helpful fallback with pre-made examples
      const fallbackContent: EnhancedExerciseContent = {
        instructions_da: "Disse √∏velser fokuserer p√• komplekse s√¶tningsstrukturer i spansk. V√¶lg det korrekte svar for hver s√¶tning.",
        questions: [
          {
            id: "fallback1",
            type: "multiple_choice",
            question_da: "V√¶lg den korrekte relative pronomen: La casa _ compramos es muy grande.",
            options: ["que", "quien", "donde", "cuando"],
            correct_answer: "que",
            explanation_da: "Vi bruger 'que' fordi det refererer til en ting (casa). 'Quien' bruges kun om personer.",
            difficulty_level: difficulty,
            proficiency_indicator: "Relative pronouns in complex sentences"
          },
          {
            id: "fallback2", 
            type: "multiple_choice",
            question_da: "Hvilken konjunktion passer bedst: Estudiar√© _ mis padres est√©n contentos.",
            options: ["para que", "porque", "cuando", "si"],
            correct_answer: "para que",
            explanation_da: "'Para que' bruges til at udtrykke form√•l og kr√¶ver konjunktiv (est√©n). Det betyder 's√• at' eller 'for at'.",
            difficulty_level: difficulty,
            proficiency_indicator: "Purpose clauses with subjunctive"
          }
        ],
        metadata: {
          topic_coverage: ["relative clauses", "subordinate clauses", "complex syntax"],
          proficiency_indicators: [{
            skill: "Complex sentence structures",
            description: "Understanding of advanced Spanish syntax patterns",
            difficulty_level: difficulty
          }],
          cognitive_load: "high",
          assessment_validity: 0.80
        }
      };
      
      console.log('‚úÖ Returning fallback content for complex sentence structures');
      return fallbackContent;
    }

    throw error;
  }
}

export async function validateExerciseQuality(exercise: EnhancedExerciseContent): Promise<{
  score: number;
  feedback: string[];
  recommendations: string[];
}> {
  const feedback: string[] = [];
  const recommendations: string[] = [];
  let score = 100;

  // Check question variety
  const questionTypes = new Set(exercise.questions.map(q => q.type));
  if (questionTypes.size === 1 && exercise.questions.length > 5) {
    score -= 10;
    feedback.push('Mangler variation i sp√∏rgsm√•lstyper');
    recommendations.push('Tilf√∏j forskellige sp√∏rgsm√•lstyper for bedre vurdering');
  }

  // Check difficulty progression
  const difficulties = exercise.questions.map(q => q.difficulty_level);
  const hasProgression = difficulties.some((d, i) => i > 0 && d !== difficulties[i-1]);
  if (!hasProgression && exercise.questions.length > 4) {
    score -= 15;
    feedback.push('Mangler sv√¶rhedsgrad progression');
    recommendations.push('Tilf√∏j gradvis stigning i sv√¶rhedsgrad');
  }

  // Check explanation quality
  const avgExplanationLength = exercise.questions.reduce((sum, q) => 
    sum + (q.explanation_da?.length || 0), 0) / exercise.questions.length;
  if (avgExplanationLength < 50) {
    score -= 20;
    feedback.push('Forklaringer er for korte');
    recommendations.push('Uddyb forklaringerne med eksempler og grammatiske regler');
  }

  return {
    score: Math.max(0, score),
    feedback,
    recommendations
  };
}
